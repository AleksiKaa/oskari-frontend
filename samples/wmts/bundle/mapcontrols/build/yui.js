/* This is a packed Oskari bundle (bundle script version Thu Jan 12 2012 12:28:07 GMT+0200 (Suomen normaaliaika)) */ 
Oskari.clazz.define("Oskari.mapframework.ui.module.common.MapControlsModule",function(){this._mapIsFullScreen=false;this._sandbox=null;this._previousHistoryAvailable=false;this._nextHistoryAvailable=false;this._controlStatuses=[]},{__name:"MapControlsModule",getName:function(){return this.__name},init:function(b){b.printDebug("[MapControlsModule] init");this._sandbox=b;var c=this;for(var d in this.eventHandlers){b.registerForEventByName(this,d)}this.toolButtonRequestHandler=Oskari.clazz.create("Oskari.mapframework.mapcontrols.request.ToolButtonRequestHandler",b,c);this.actions={};this._createInitialToolbarActions(b);this.extraActions={};this.extraButtons={};var a=Ext.create("Ext.panel.Panel",{id:"map_controls_toolbar",x:10,y:10,style:"{ z-index: 99999; }",bodyStyle:{background:"transparent",padding:"0px 10px 0px 0px"},border:false,padding:5,layout:{type:"hbox"},items:c._getMapToolbarItems(b)});this._mainpanel=a;return a},start:function(a){a.printDebug("Starting "+this.getName());this._previousHistoryAvailable=false;this._nextHistoryAvailable=false;a.addRequestHandler("MapControls.ToolButtonRequest",this.toolButtonRequestHandler)},stop:function(){this._sandbox.removeRequestHandler("MapControls.ToolButtonRequest",this.toolButtonRequestHandler)},_requestToolSelection:function(d){var a=this._sandbox.getRequestBuilder("ToolSelectionRequest");var c=a(d);this._sandbox.request(this,c)},_refreshToolbarButtons:function(){this._mainpanel.removeAll(true);this._createInitialToolbarActions(this._sandbox);var a=this._getMapToolbarItems(this._sandbox);this._mainpanel.add(a)},removeToolButton:function(b){if(!b||!b.group){return}var d=b.group;var a=b.toolId;if(this.extraActions[d]){if(!a){for(var d in this.extraActions){if(this.extraActions[d]){for(var c in this.extraActions[d]){if(c===a){this.extraButtons[a]=null}}}}this.extraActions[d]=null}else{this.extraActions[d][a]=null;this.extraButtons[a]=null}}this._refreshToolbarButtons()},setButtonDisabled:function(a,c){if(!a||!a.toolId){return}var b=this.extraButtons[a.toolId];if(b){b.setDisabled(c);if(!c&&a.callback){b.setHandler(a.callback)}}else{this._sandbox.printDebug("Couldnt find button for toolId: "+a.toolId)}},addToolButton:function(a){if(!a){return}var b=this;if(!a.toolId){if(!a.callback){return}a.toolId="tool_"+Ext.id()}if(!a.group){a.group="extra"}a.scale="large";a.componentCls="opacity_80";a.id=a.toolId;if(!a.callback){a.toggleGroup="mapcontrolsgroup";a.handler=function(){b.actions.map_control_measure_menu.menu.hide();b._requestToolSelection("map_control_navigate_tool")}}else{a.handler=a.callback}if(!this.extraActions[a.group]){this.extraActions[a.group]={}}this.extraActions[a.group][a.toolId]=a;this._refreshToolbarButtons()},_createInitialToolbarActions:function(b){var c=this;var d="Oskari.mapframework.ui.module.common.mapmodule.GeoAction";var a=this._sandbox.findRegisteredModuleInstance("MainMapModule");this.actions.map_control_tool_prev=Ext.create("Ext.button.Button",Ext.create(d,{iconCls:"map_control_tool_prev",tooltip:b.getText("map_control_tool_prev_tooltip"),scale:"large",control:a._navigationHistoryTool.previous,componentCls:"opacity_80",handler:function(){c.actions.map_control_measure_menu.menu.hide();a.notifyMoveEnd()}}));this.actions.map_control_tool_next=Ext.create("Ext.button.Button",Ext.create(d,{iconCls:"map_control_tool_next",tooltip:b.getText("map_control_tool_next_tooltip"),scale:"large",control:a._navigationHistoryTool.next,componentCls:"opacity_80",handler:function(){c.actions.map_control_measure_menu.menu.hide();a.notifyMoveEnd()}}));this.actions.map_control_select_tool=Ext.create("Ext.button.Button",Ext.create(d,{iconCls:"map_control_navigate_tool",tooltip:b.getText("map_control_navigate_tool_tooltip"),enableToggle:true,allowDepress:false,scale:"large",pressed:true,toggleGroup:"mapcontrolsgroup",componentCls:"opacity_80",handler:function(){c.actions.map_control_measure_menu.menu.hide();c._requestToolSelection("map_control_navigate_tool")}}));this.actions.map_control_zoom_tool=Ext.create("Ext.button.Button",Ext.create(d,{iconCls:"map_control_zoom_tool",tooltip:b.getText("map_control_zoom_tool_tooltip"),enableToggle:true,allowDepress:false,toggleGroup:"mapcontrolsgroup",scale:"large",componentCls:"opacity_80",handler:function(){c.actions.map_control_measure_menu.menu.hide();
c._requestToolSelection("map_control_zoom_tool")}}));this.actions.map_control_measure_tool=Ext.create("Ext.button.Button",Ext.create(d,{tooltip:b.getText("map_control_measure_tool_tooltip"),scale:"large",allowDepress:false,iconCls:"map_control_measure_tool",componentCls:"opacity_80",handler:function(){c.actions.map_control_measure_menu.menu.hide();c.actions.map_control_measure_menu.toggle(true,true);c.actions.map_control_select_tool.toggle(false,true);c._requestToolSelection("map_control_measure_tool")}}));this.actions.map_control_measure_area_tool=Ext.create("Ext.button.Button",Ext.create(d,{iconCls:"map_control_measure_area_tool",tooltip:b.getText("map_control_measure_area_tool_tooltip"),scale:"large",allowDepress:false,componentCls:"opacity_80",handler:function(){c.actions.map_control_measure_menu.menu.hide();c.actions.map_control_measure_menu.toggle(true,true);c.actions.map_control_select_tool.toggle(false,true);c._requestToolSelection("map_control_measure_area_tool")}}));this.actions.map_control_measure_menu=Ext.create("Ext.button.Button",{iconCls:"map_control_measure_menu",tooltip:b.getText("map_control_measure_menu_tooltip"),arrowAlign:"right",allowDepress:false,cls:"x-btn-icon",scale:"large",enableToggle:false,toggleGroup:"mapcontrolsgroup",componentCls:"opacity_80",menu:{xtype:"menu",defaults:{xtype:"button",cls:"x-btn-icon",enableToggle:true,iconAlign:"left",scale:"large"},minWidth:45,plain:true,items:[c.actions.map_control_measure_tool,c.actions.map_control_measure_area_tool]},listeners:{click:function(){if(this.pressed&&!c.actions.map_control_measure_tool.pressed&&!c.actions.map_control_measure_area_tool.pressed){c.actions.map_control_select_tool.toggle(true,false);this.toggle(false,true);c._requestToolSelection("map_control_navigate_tool")}}}});this.actions.map_print_tool=Ext.create("Ext.Button",Ext.create(d,{iconCls:"map_control_map_print_tool",tooltip:b.getText("map_control_print_tool_tooltip"),scale:"large",componentCls:"opacity_80",handler:function(){c.actions.map_control_measure_menu.menu.hide();c._sandbox.request(c,b.getRequestBuilder("GenerateHtmlPrintToMapRequest")())}}));this.actions.map_link_tool=Ext.create("Ext.Button",Ext.create(d,{iconCls:"map_control_map_link_tool",tooltip:b.getText("map_control_map_link_tool_tooltip"),scale:"large",componentCls:"opacity_80",handler:function(){c.actions.map_control_measure_menu.menu.hide();c._sandbox.request(c,b.getRequestBuilder("GenerateHtmlLinkToMapRequest")())}}))},_getMapToolbarItems:function(a){var d=this;var f=[d.actions.map_control_tool_prev,d.actions.map_control_tool_next];this._fillWithToolbarSpacers(f,6);f.push(d.actions.map_control_select_tool);this._fillWithToolbarSpacers(f,5);f.push(d.actions.map_control_zoom_tool);f.push(d.actions.map_control_measure_menu);this._fillWithToolbarSpacers(f,4);f.push(d.actions.map_print_tool);f.push(d.actions.map_link_tool);for(var e in this.extraActions){if(this.extraActions[e]){this._fillWithToolbarSpacers(f,4);for(var c in this.extraActions[e]){if(this.extraActions[e][c]){var b=Ext.create("Ext.Button",Ext.create("Oskari.mapframework.ui.module.common.mapmodule.GeoAction",this.extraActions[e][c]));this.extraButtons[c]=b;f.push(b)}}}}f.push({xtype:"tbfill"});return f},_fillWithToolbarSpacers:function(c,b){for(var a=0;a<b;++a){c.push({xtype:"tbspacer"})}},toggleButtonState:function(a){if(a=="map_control_map_publisher_tool"){this._sandbox.request(this,this._sandbox.getRequestBuilder("StartMapPublisherRequest")())}else{if(a=="map_control_start_net_service_centre_tool"){this._sandbox.request(this,this._sandbox.getRequestBuilder("ShowNetServiceCentreRequest")())}}},eventHandlers:{AfterGenerateHtmlLinkToMapEvent:function(b){var a=b.getHtml();this._sandbox.showPopupText("maplinkservice_link_generated_messagebox_title","maplinkservice_link_generated_messagebox_message",[a])},AfterGenerateHtmlPrintToMapEvent:function(b){var a=b.getHtml();this.openPrintWindow(a)},AfterStartMapPublisherEvent:function(a){window.location.href=a.getUrl()},AfterMapMoveEvent:function(b){var a=this._sandbox.findRegisteredModuleInstance("MainMapModule")._navigationHistoryTool;
if(a.previousStack.length>0){this.actions.map_control_tool_prev.enable()}else{this.actions.map_control_tool_prev.disable()}if(a.nextStack.length>0){this.actions.map_control_tool_next.enable()}else{this.actions.map_control_tool_next.disable()}},CoreReadyEvent:function(a){this._sandbox.findRegisteredModuleInstance("MainMapModule")._navigationHistoryTool.clear()},ToolSelectedEvent:function(b){if(b.getNamespace()!==this.__name){for(var a in this.actions){this.actions[a].setActive(false)}this.actions.map_control_select_tool.setActive(true)}},EscPressedEvent:function(a){this.setApplicationViewToNormal()}},onEvent:function(b){var a=this.eventHandlers[b.getName()];if(!a){return}return a.apply(this,[b])},openPrintWindow:function(b){if(this.problemWithPrintingSafariCase()){this._sandbox.showPopupText("mapcontrolsservice_problem_with_safari_printing_title","mapcontrolsservice_problem_with_safari_printing_message",null);return}var e="tulostus";var f=parseInt(Oskari.$().startup.printWindowHeight)+60;var c=parseInt(Oskari.$().startup.printWindowWidth);var a=this._sandbox.getBrowserWindowSize();var d="scrollbars=no, ";if(a.height<f){f=a.height;d="scrollbars=yes, "}window.open(b,e,"width="+c+", height="+f+", menubar=yes, resizable=no, "+d+" location=no, status=no, menubar=no")},problemWithPrintingSafariCase:function(){if(Ext.isSafari){selectedLayers=this._sandbox.findAllSelectedMapLayers();for(var a=0;a<selectedLayers.length;a++){if(selectedLayers[a].getOpacity()<100){return true}}}return false},setApplicationViewToFullscreen:function(){if(this._mapIsFullScreen){return}this._mapIsFullScreen=true;this.actions.map_control_full_screen_tool.setIconCls("map_control_full_screen_tool_fs");var a=Ext.getCmp("full_screen_viewport");if(a){a.destroy()}var b=Ext.getCmp("main-app");if(b){b.hide()}var c=Ext.getCmp("main-app-window");if(c){c.hide()}var e=Ext.getCmp("main-app-panel");a=Ext.create("Ext.container.Viewport",{id:"full_screen_viewport",layout:"fit",floating:true,focusOnToFront:true,items:e});var f=["menu","dockWrapper","topWrapper","footer"];for(var d in f){var g=document.getElementById(f[d]);if(g&&g.style){g.style.display="none"}}if(e){e.doLayout()}if(a){a.doLayout();a.toFront();a.show()}},setApplicationViewToNormal:function(){if(!this._mapIsFullScreen){return}this._mapIsFullScreen=false;this.actions.map_control_full_screen_tool.setIconCls("map_control_full_screen_tool");var b=Ext.getCmp("main-app");var e=Ext.getCmp("main-app-panel");var c=Ext.getCmp("main-app-window");var a=Ext.getCmp("full_screen_viewport");if(a){a.toBack();a.items.clear();a.destroy()}var f=["menu","dockWrapper","topWrapper","footer"];for(var d in f){var g=document.getElementById(f[d]);if(g&&g.style){g.style.display="block"}}if(b&&e&&c){b.add(e);c.show();b.show();c.doLayout();b.doLayout();document.body.style.overflow="auto";document.body.style["overflow-x"]="auto";document.body.style["overflow-y"]="auto"}}},{protocol:["Oskari.mapframework.module.Module"]});Oskari.clazz.define("Oskari.mapframework.mapcontrols.request.ToolButtonRequestHandler",function(a,b){this.sandbox=a;this.plugin=b},{handleRequest:function(b,c){var a=c.getType();this.sandbox.printDebug("[Oskari.mapframework.mapcontrols.request.ToolButtonRequestHandler] got requesttype "+a);if("add"===a){this.plugin.addToolButton(c.getConfig())}else{if("remove"===a){this.plugin.removeToolButton(c.getConfig())}else{if("enable"===a){this.plugin.setButtonDisabled(c.getConfig(),false)}else{if("disable"===a){this.plugin.setButtonDisabled(c.getConfig(),true)}else{if("toggle"===a){}}}}}}},{protocol:["Oskari.mapframework.core.RequestHandler"]});Ext.namespace("Oskari");Ext.define("Oskari.mapframework.ui.module.common.mapmodule.GeoAction",{extend:Ext.Action,control:null,map:null,uScope:null,uHandler:null,uToggleHandler:null,uCheckHandler:null,constructor:function(a){this.uScope=a.scope;this.uHandler=a.handler;this.uToggleHandler=a.toggleHandler;this.uCheckHandler=a.checkHandler;this.activateHandler=a.activateHandler;this.deactivateHandler=a.deactivateHandler;a.scope=this;a.handler=this.pHandler;a.toggleHandler=this.pToggleHandler;a.checkHandler=this.pCheckHandler;this.control=a.control;delete a.control;if(this.control){if(a.map){a.map.addControl(this.control);delete a.map}if((a.pressed||a.checked)&&this.control.map){this.control.activate()}this.control.events.on({activate:this.onCtrlActivate,deactivate:this.onCtrlDeactivate,scope:this})}this.callParent(arguments)},pHandler:function(a){if(this.control&&this.control.type==OpenLayers.Control.TYPE_BUTTON){this.control.trigger()}if(this.uHandler){this.uHandler.apply(this.uScope,arguments)}},pToggleHandler:function(a,b){this.changeControlState(b);if(this.uToggleHandler){this.uToggleHandler.apply(this.uScope,arguments)}},pCheckHandler:function(a,b){this.changeControlState(b);if(this.uCheckHandler){this.uCheckHandler.apply(this.uScope,arguments)}},changeControlState:function(a){if(a){if(!this._activating){this._activating=true;if(this.control){this.control.activate()}this._activating=false}}else{if(!this._deactivating){this._deactivating=true;if(this.control){this.control.deactivate()}this._deactivating=false}}},onCtrlActivate:function(){if(this.activateHandler){this.activateHandler()}if(this.control&&this.control.type==OpenLayers.Control.TYPE_BUTTON){this.enable()}else{this.safeCallEach("toggle",[true]);this.safeCallEach("setChecked",[true])}},onCtrlDeactivate:function(){if(this.deActivateHandler){this.deActivateHandler()}if(this.control&&this.control.type==OpenLayers.Control.TYPE_BUTTON){this.disable()}else{this.safeCallEach("toggle",[false]);this.safeCallEach("setChecked",[false])}},safeCallEach:function(e,b){var d=this.items;for(var c=0,a=d.length;c<a;c++){if(d[c][e]){d[c].rendered?d[c][e].apply(d[c],b):d[c].on({render:d[c][e].createDelegate(d[c],b),single:true})}}}});