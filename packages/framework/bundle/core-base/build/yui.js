/* This is a packed Oskari bundle (bundle script version Thu May 31 2012 12:23:19 GMT+0300 (Suomen kes√§aika)) */ 
Oskari.clazz.define("Oskari.mapframework.core.RequestHandler",function(){},{handleRequest:function(a,b){throw"Implement your own"}});Oskari.clazz.define("Oskari.mapframework.core.Core",function(){this._selectedLayers=new Array();this._mapLayersHighlighted=new Array();this._map;this._uiManager;this._sandbox=Oskari.clazz.create("Oskari.mapframework.sandbox.Sandbox",this);Oskari.$("sandbox",this._sandbox);this._services;this._servicesByQName={};this._debug=true;this._mapPublisherWizardUrl;this._doSniffing=false;this._wfsRequestTiler;this._ctrlKeyDown=false;this._ongoingActions={};this._allowMultipleHighlightLayers=false;this._wfsTableQueryId=0;this._currentlyFetchingWfsTiles=0;this._mapIdFromUrl;this._availableRequestsByName={};this._availableEventsByName={}},{init:function(c,f){this.printDebug("Initializing core...");var a=this._sandbox;Oskari.$().mapframework.runtime.components=new Array();this._services=c;if(c){for(var d=0;d<c.length;d++){this._servicesByQName[c[d].getQName()]=c[d]}}this.registerFrameworkComponentToRuntimeEnvironment(this,"core");this.registerFrameworkComponentToRuntimeEnvironment(this._sandbox,"sandbox");this.registerFrameworkComponentToRuntimeEnvironment(this._uiManager,"uiManager");for(var b=0;b<c.length;b++){this.registerFrameworkComponentToRuntimeEnvironment(c[b],c[b].getName())}this.printDebug("Sandbox ready, building up domain...");this.createMapDomain();this.printDebug("Domain ready, creating UI...");this.enhancements=f;var e=this;e.start();this.dispatch(this.getEventBuilder("CoreInitFinishedEvent")())},start:function(){var b=this.enhancements;this.printDebug("UI ready, running enhancements...");this.doEnhancements(b);this.printDebug("Enhancements ready, starting modules...");if(this._doSniffing){this._mapIdFromUrl=this.getRequestParameter("id");this.printDebug("Application configured for sniffing. Starting sniffer.");var a=this.getService("Oskari.mapframework.service.UsageSnifferService");if(a){a.startSniffing()}}if(this._wfsRequestTiler!=null){this._wfsRequestTiler.init()}this.printDebug("Modules started. Core ready.");this.dispatch(this.getEventBuilder("CoreReadyEvent")())},dispatch:function(a){this._sandbox.notifyAll(a)},defaultRequestHandlers:{AddMapLayerRequest:function(a){this.handleAddMapLayerRequest(a);return true},ManageFeaturesRequest:function(a){this.handleManageFeaturesRequest(a);return true},RemoveMapLayerRequest:function(a){this.handleRemoveMapLayerRequest(a);return true},SearchRequest:function(a){this.handleSearchRequest(a);return true},ShowMapLayerInfoRequest:function(a){this.handleShowMapLayerInfoRequest(a);return true},RearrangeSelectedMapLayerRequest:function(a){this.handleRearrangeSelectedMapLayerRequest(a);return true},DisableMapKeyboardMovementRequest:function(a){this.handleDisableMapKeyboardMovementRequest(a);return true},EnableMapKeyboardMovementRequest:function(a){this.handleEnableMapKeyboardMovementRequest(a);return true},ChangeMapLayerOpacityRequest:function(a){this.handleChangeMapLayerOpacityRequest(a);return true},StartMapPublisherRequest:function(a){this.handleStartMapPublisherRequest(a);return true},GenerateHtmlLinkToMapRequest:function(a){this.handleGenerateHtmlLinkToMapRequest(a);return true},GenerateHtmlPrintToMapRequest:function(a){this.handleGenerateHtmlPrintToMapRequest(a);return true},ChangeMapLayerStyleRequest:function(a){this.handleChangeMapLayerStyleRequest(a);return true},DrawPolygonRequest:function(a){this.handleDrawPolygonRequest(a);return true},DrawSelectedPolygonRequest:function(a){this.handleDrawSelectedPolygonRequest(a);return true},SelectPolygonRequest:function(a){this.handleSelectPolygonRequest(a);return true},ErasePolygonRequest:function(a){this.handleErasePolygonRequest(a);return true},UpdateHiddenValueRequest:function(a){this.handleUpdateHiddenValueRequest(a);return true},DeactivateAllOpenlayersMapControlsButNotMeasureToolsRequest:function(a){this.handleDeactivateAllOpenlayersMapControlsButNotMeasureToolsRequest(a);return true},DeactivateAllOpenlayersMapControlsRequest:function(a){this.handleDeactivateAllOpenlayersMapControlsRequest(a);return true
},HighlightMapLayerRequest:function(a){this.handleHighlightMapLayerRequest(a);return true},HighlightWFSFeatureRequest:function(a){this.handleHighlightWFSFeatureRequest(a);return true},HighlightWFSFeatureRequestByGeoPoint:function(a){this.handleHighlightWFSFeatureRequestByGeoPoint(a);return true},RemovePolygonRequest:function(a){this.handleRemovePolygonRequest(a);return true},HideWizardRequest:function(a){this.handleHideWizardRequest(a);return true},ShowWizardRequest:function(a){this.handleShowWizardRequest(a);return true},ShowNetServiceCentreRequest:function(a){this.handleShowNetServiceCentreRequest(a);return true},HideNetServiceCentreRequest:function(a){this.handleHideNetServiceCentreRequest(a);return true},NetServiceCenterRequest:function(a){this.handleNetServiceCenterRequest(a);return true},HideMapMarkerRequest:function(a){this.handleHideMapMarkerRequest(a);return true},UpdateNetServiceCentreRequest:function(a){this.handleUpdateNetServiceCentreRequest(a);return true},ActionStartRequest:function(a){this.handleActionStartRequest(a);return true},ActionReadyRequest:function(a){this.handleActionReadyRequest(a);return true},DimMapLayerRequest:function(a){this.handleDimMapLayerRequest(a);return true},CtrlKeyDownRequest:function(a){this.handleCtrlKeyDownRequest(a);return true},CtrlKeyUpRequest:function(a){this.handleCtrlKeyUpRequest(a);return true},__default:function(a){this.printWarn("!!!");this.printWarn("  There is no handler for");this.printWarn("  '"+a.getName()+"'");return false}},processRequest:function(c){var d=c.getName();var b=this.defaultRequestHandlers[d];if(b){rv=b.apply(this,[c])}else{var a=this.externalHandlerCls[d];if(a){rv=a.handleRequest(this,c)}else{b=this.defaultRequestHandlers.__default;rv=b.apply(this,[c])}}delete c;return rv},externalHandlerCls:{},addRequestHandler:function(b,a){this.externalHandlerCls[b]=a},removeRequestHandler:function(b,a){if(this.externalHandlerCls[b]===a){this.externalHandlerCls[b]=null}},getQNameForRequest:function(b){var e=this._availableRequestsByName[b];if(!e){this.printDebug("#!#!# ! Updating request metadata...");var d=Oskari.clazz.protocol("Oskari.mapframework.request.Request");for(p in d){var c=d[p];var a=c._class.prototype.getName();this._availableRequestsByName[a]=p}this.printDebug("#!#!# ! Finished Updating request metadata...");e=this._availableRequestsByName[b]}return e},createRequest:function(){arguments[0]=this.getQNameForRequest(arguments[0]);var a=Oskari.clazz.createArrArgs(arguments);return a},getRequestBuilder:function(){var a=this.getQNameForRequest(arguments[0]);return Oskari.clazz.builder(a)},getQNameForEvent:function(b){var e=this._availableEventsByName[b];if(!e){this.printDebug("#!#!# ! Updating event metadata...");var d=Oskari.clazz.protocol("Oskari.mapframework.event.Event");for(p in d){var c=d[p];var a=c._class.prototype.getName();this._availableEventsByName[a]=p}this.printDebug("#!#!# ! Finished Updating event metadata...");e=this._availableEventsByName[b]}return e},createEvent:function(){arguments[0]=this.getQNameForEvent(arguments[0]);var a=Oskari.clazz.createArrArgs(arguments);return a},getEventBuilder:function(){var a=this.getQNameForEvent(arguments[0]);return Oskari.clazz.builder(a)},disableDebug:function(){this._debug=false},enableMapMovementLogging:function(){this._doSniffing=true},printDebug:function(a){if(this._debug&&window.console!=null){if(window.console.debug!=null){console.debug(a)}else{if(window.console.log!=null){console.log(a)}}}},printWarn:function(a){if(window.console!=null){console.warn(a)}},getService:function(a){var b=this._servicesByQName[a];if(b){return b}throw"Cannot find service with type '"+a+"'"},findRegisteredModule:function(a){return this._sandbox.findRegisteredModule},getMap:function(){return this._map},registerFrameworkComponentToRuntimeEnvironment:function(b,a){this.printDebug("registering framework component '"+a+"' to runtime");Oskari.$().mapframework.runtime.components[a]=b},unregisterFrameworkComponentFromRuntimeEnvironment:function(b,a){this.printDebug("unregistering framework component '"+a+"' from runtime");Oskari.$().mapframework.runtime.components[a]=null
},getSandbox:function(){return this._sandbox},getCountOfWfsTilesBeingFetched:function(){return this._currentlyFetchingWfsTiles},checkArrayIfTheseAreSame:function(b){if(b.length>1){var c=b[0];for(var a=1;a<b.length;a++){if(b[a]!=c&&b[a]!=null){return false}}return true}else{return false}},scheduleMapLayerRearrangeAfterWfsMapTilesAreReady:function(){},getLanguage:function(){return Oskari.getLang()},getBrowserWindowSize:function(){if(jQuery.browser.opera&&window.innerHeight!=null){var a=window.innerHeight}var c=jQuery(window).width();var b={};b.height=jQuery(window).height();b.width=c;this.printDebug("Got browser window size is: width: "+b.width+" px, height:"+b.height+" px.");return b},getRequestParameter:function(b){b=b.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]");var a="[\\?&]"+b+"=([^&#]*)";var d=new RegExp(a);var c=d.exec(window.location.href);if(c==null){return null}else{return c[1]}},domSelector:function(a){return jQuery(a)},getObjectName:function(a){return a.__name},getObjectCreator:function(a){return a._creator},setObjectCreator:function(b,a){b._creator=a},copyObjectCreatorToFrom:function(b,a){b._creator=a._creator}});Oskari.clazz.category("Oskari.mapframework.core.Core","build-domain-methods",{createMapLayerDomain:function(d){if(!d||!d.layers){return}var a=this.getService("Oskari.mapframework.service.MapLayerService");var e=d.layers;for(var c=0;c<e.length;c++){var b=a.createMapLayer(e[c]);a.addLayer(b,true)}},createMapDomain:function(){this._map=Oskari.clazz.create("Oskari.mapframework.domain.Map");return this._map}});Oskari.clazz.category("Oskari.mapframework.core.Core","enhancement-methods",{doEnhancements:function(b){for(var a=0;a<b.length;a++){b[a].enhance(this)}}});Oskari.clazz.category("Oskari.mapframework.core.Core","language-methods",{getText:function(a,b){},showPopupText:function(b,d,c){var a=this.getService("Oskari.mapframework.service.LanguageService");return a.showPopup(b,d,c)}});Oskari.clazz.category("Oskari.mapframework.core.Core","feature-key-listener-methods",{handleCtrlKeyDownRequest:function(a){this._ctrlKeyDown=true},handleCtrlKeyUpRequest:function(a){this._ctrlKeyDown=false},isCtrlKeyDown:function(){return this._ctrlKeyDown}});Oskari.clazz.define("Oskari.mapframework.event.CoreInitFinishedEvent",function(c,b,a){},{__name:"CoreInitFinishedEvent",getName:function(){return this.__name}},{protocol:["Oskari.mapframework.event.Event"]});Oskari.clazz.define("Oskari.mapframework.event.CoreReadyEvent",function(c,b,a){},{__name:"CoreReadyEvent",getName:function(){return this.__name}},{protocol:["Oskari.mapframework.event.Event"]});Oskari.clazz.define("Oskari.mapframework.event.ToolSelectedEvent",function(a){this._toolId=a;this._origin=null},{__name:"ToolSelectedEvent",getName:function(){return this.__name},getToolId:function(){return this._toolId},setToolId:function(a){this._toolId=a},getOrigin:function(){return this._origin},setOrigin:function(a){this._origin=a},getNamespace:function(){if(this._toolId.indexOf(".")==-1){return""}return this._toolId.substring(0,this._toolId.lastIndexOf("."))},getToolName:function(){if(this._toolId.indexOf(".")==-1){return this._toolId}return this._toolId.substring(this._toolId.lastIndexOf("."))}},{protocol:["Oskari.mapframework.event.Event"]});