/* This is a packed Oskari bundle (bundle script version Thu May 31 2012 12:23:19 GMT+0300 (Suomen kes√§aika)) */ 
Oskari.clazz.define("Oskari.mapframework.bundle.mapfull.MapFullBundleInstance",function(){this.map=null;this.core=null;this.sandbox=null;this.mapmodule=null;this.mapDivId="mapdiv"},{getMapModule:function(){return this.mapmodule},getSandbox:function(){return this.sandbox},createUi:function(){var e=this;if(this.conf.size){jQuery("#"+this.mapDivId).width(this.conf.size.width);jQuery("#"+this.mapDivId).height(this.conf.size.height)}else{function f(){jQuery("#"+e.mapDivId).height(jQuery(window).height())}var a;jQuery(window).resize(function(){clearTimeout(a);a=setTimeout(f,100)});f()}var d=Oskari.clazz.create("Oskari.mapframework.ui.module.common.MapModule","Main");this.mapmodule=d;var g=this.sandbox.register(d);d.start(this.sandbox);g.render(this.mapDivId);if(this.conf.plugins){var b=this.conf.plugins;for(var c=0;c<b.length;c++){b[c].instance=Oskari.clazz.create(b[c].id,b[c].config);d.registerPlugin(b[c].instance);d.startPlugin(b[c].instance)}}this.map=g},start:function(){var h=this;var g=h.conf;var d=Oskari.getLang();var b=h;var c=Oskari.clazz.create("Oskari.mapframework.core.Core");this.core=c;var l=c.getSandbox();this.sandbox=l;var k=this.createServices(g);var m=[];m.push(Oskari.clazz.create("Oskari.mapframework.enhancement.mapfull.StartMapWithLinkEnhancement"));l.setUser(g.user);l.setAjaxUrl(g.globalMapAjaxUrl);c.init(k,m);var f=l.getService("Oskari.mapframework.service.MapLayerService");var a=g.layers;if(a){for(var e=0;e<a.length;e++){var j=f.createMapLayer(a[e]);f.addLayer(j,true)}}this.createUi();l.registerAsStateful(this.mediator.bundleId,this);this.setState(this.state)},_teardownState:function(c){var d=this.sandbox.findAllSelectedMapLayers();var a=this.sandbox.getRequestBuilder("RemoveMapLayerRequest");for(var b=0;b<d.length;b++){this.sandbox.request(c.getName(),a(d[b].getId()))}},setState:function(a){var h=this.sandbox.findRegisteredModuleInstance("MainMapModule");this._teardownState(h);if(a.selectedLayers){var f=this.sandbox.getRequestBuilder("AddMapLayerRequest");var j=this.sandbox.getRequestBuilder("ChangeMapLayerOpacityRequest");var c=this.sandbox.getRequestBuilder("MapModulePlugin.MapLayerVisibilityRequest");var d=this.sandbox.getRequestBuilder("ChangeMapLayerStyleRequest");var g=a.selectedLayers.length;for(var b=0;b<g;++b){var e=a.selectedLayers[b];this.sandbox.request(h.getName(),f(e.id,true));if(e.hidden){this.sandbox.request(h.getName(),c(e.id,false))}if(e.style){this.sandbox.request(h.getName(),d(e.id,e.style))}if(e.opacity){this.sandbox.request(h.getName(),j(e.id,e.opacity))}}}if(a.east){this.sandbox.getMap().moveTo(a.east,a.north,a.zoom)}this.sandbox.syncMapState(true)},createServices:function(b){var e=this;var c=[];var a=Oskari.clazz.create("Oskari.mapframework.service.MapLayerService",b.globalMapAjaxUrl+"action_route=GetMapLayers",this.core.getSandbox());c.push(a);a.registerLayerModel("wmtslayer","Oskari.mapframework.wmts.domain.WmtsLayer");var d=Oskari.clazz.create("Oskari.mapframework.wmts.service.WmtsLayerModelBuilder");a.registerLayerModelBuilder("wmtslayer",d);c.push(Oskari.clazz.create("Oskari.mapframework.service.OgcSearchService",b.ogcSearchServiceEndpoint,this.core));if(b.disableDevelopmentMode=="true"){core.disableDebug();c.push(Oskari.clazz.create("Oskari.mapframework.service.UsageSnifferService",2,"/log/"));core.enableMapMovementLogging()}return c},update:function(){},stop:function(){this.sandbox.unregisterStateful(this.mediator.bundleId);alert("Stopped!")},getState:function(){var b=this.sandbox.getMap();var d=this.sandbox.findAllSelectedMapLayers();var j=b.getZoom();var h=b.getX();var a=b.getY();var c={north:a,east:h,zoom:b.getZoom(),selectedLayers:[]};for(var f=0;f<d.length;f++){var g=d[f];var e={id:g.getId(),opacity:g.getOpacity()};if(!g.isVisible()){e.hidden=true}if(g.getCurrentStyle&&g.getCurrentStyle()&&g.getCurrentStyle().getName()&&g.getCurrentStyle().getName()!="!default!"){e.style=g.getCurrentStyle().getName()}c.selectedLayers.push(e)}return c}},{protocol:["Oskari.bundle.BundleInstance","Oskari.userinterface.Stateful"]});Oskari.clazz.define("Oskari.mapframework.enhancement.mapfull.StartMapWithConfigurationsEnhancement",function(a,b){this._preSelectedJson=a;
this._mapConfigurations=b},{enhance:function(b){var f=b.getRequestParameter("coord");var c=b.getRequestParameter("zoomLevel");var a=b.getRequestParameter("mapLayers");if(f!=null&&c!=null&&a!=null){b.printDebug("Ahem, we found 'mapLayers, coord and zoomLevel' parameters from url. This is probably a link startup. Skipping preselection.");return}b.printDebug("Enhancing application by setting position.");var h=this._mapConfigurations.east;var g=this._mapConfigurations.north;var k=this._mapConfigurations.scale;var e=false;b.getMap().moveTo(h,g,k);b.printDebug("Enhancing application by preselecting layers.");if(!this._preSelectedJson||!this._preSelectedJson.preSelectedLayers){return}for(var d=0;d<this._preSelectedJson.preSelectedLayers.length;d++){var j=this._preSelectedJson.preSelectedLayers[d];b.processRequest(b.getRequestBuilder("AddMapLayerRequest")(j.id,false))}}},{protocol:["Oskari.mapframework.enhancement.Enhancement"]});Oskari.clazz.define("Oskari.mapframework.enhancement.mapfull.StartMapWithLinkEnhancement",function(){},{enhance:function(u){u.printDebug("Checking if map is started with link...");var o=u.getRequestParameter("coord");var n=u.getRequestParameter("zoomLevel");var h=u.getRequestParameter("mapLayers");var f=u.getRequestParameter("showMarker");var k=u.getRequestParameter("keepLayersOrder");if(k===null){k=true}u.getMap().setMarkerVisible(f=="true");if(o===null||n===null){return}var p;if(o.indexOf("_")>=0){p=o.split("_")}else{p=o.split("%20")}var j=p[0];var m=p[1];if(j===null||m===null){u.printDebug("Could not parse link location. Skipping.");return}u.getMap().moveTo(j,m,n);u.printDebug("This is startup by link, moving map...");if(h!==null&&h!==""){u.printDebug("Continuing by adding layers...");var a=h.split(",");for(var s=0;s<a.length;s++){var g=a[s].split("+");var e=g[0];var b=g[1];var t=g[2];if((e.indexOf("_")!=-1)&&(e.indexOf("base_")==-1)&&(e.indexOf("BASE_")==-1)){var v=e.split("_");e=null;var c=null;for(var d in v){if(d){c=u.findBaselayerBySublayerIdFromAllAvailable(v[d]);if(c){e=c.getId();break}}}}if(e!==null){var q=null;var l=null;q=u.getRequestBuilder("AddMapLayerRequest");l=q(e,k);u.processRequest(l);q=u.getRequestBuilder("ChangeMapLayerOpacityRequest");l=q(e,b);u.processRequest(l);q=u.getRequestBuilder("ChangeMapLayerStyleRequest");l=q(e,t);u.processRequest(l)}else{u.printWarn("[StartMapWithLinkEnhancement] Could not find baselayer for "+e)}}}}},{protocol:["Oskari.mapframework.enhancement.Enhancement"]});Oskari.clazz.define("Oskari.mapframework.enhancement.mapfull.StartMapWithSearchResultEnhancement",function(){},{enhance:function(b){b.printDebug("Checking if map is started with search result...");var g=b.getRequestParameter("coord");var e=b.getRequestParameter("zoomLevel");if(g==null||e==null){return}var c=b.getRequestParameter("mapLayers");if(c!=null){b.printDebug("This is probably startup by link, not by search result. Skipping.");return}var a;if(g.indexOf("_")>=0){a=g.split("_")}else{a=g.split("%20")}var d=a[0];var f=a[1];if(d==null||f==null){b.printDebug("Could not parse link location. Skipping.")}b.printDebug("This is startup by search result, moving map.");b.getMap().moveTo(d,f,e);b.getMap().setMarkerVisible(true)}},{protocol:["Oskari.mapframework.enhancement.Enhancement"]});